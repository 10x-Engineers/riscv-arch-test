
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.9
// timestamp : Thu Feb 17 18:59:38 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/rv32i_b.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the bext instruction of the RISC-V RV32B,RV32Zbs extension for the bext covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IB,RV32IZbs")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*B.*);def TEST_CASE_1=True;",bext)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zbs.*);def TEST_CASE_1=True;",bext)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x31, rd==x31, rs1_val == 1431655765, 
// opcode: bext ; op1:x30; op2:x31; dest:x31; op1val:0x55555555;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x31, 0x00000000, 0x55555555, 0xffffffff, x1, 0, x2)

inst_1:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs2_val == 2147483647, 
// opcode: bext ; op1:x29; op2:x29; dest:x29; op1val:0xffffffff;  op2val:0xffffffff
TEST_RR_OP(bext, x29, x29, x29, 0x00000000, 0xffffffff, 0xffffffff, x1, 4, x2)

inst_2:
// rs1 == rd != rs2, rs1==x28, rs2==x30, rd==x28, rs2_val == 3221225471, 
// opcode: bext ; op1:x28; op2:x30; dest:x28; op1val:0xffffffff;  op2val:0xbfffffff
TEST_RR_OP(bext, x28, x28, x30, 0x00000000, 0xffffffff, 0xbfffffff, x1, 8, x2)

inst_3:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x30, rs2_val == 3758096383, 
// opcode: bext ; op1:x27; op2:x27; dest:x30; op1val:0xffffffff;  op2val:0xffffffff
TEST_RR_OP(bext, x30, x27, x27, 0x00000000, 0xffffffff, 0xffffffff, x1, 12, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x28, rd==x27, rs2_val == 4026531839, 
// opcode: bext ; op1:x31; op2:x28; dest:x27; op1val:0xffffffff;  op2val:0xefffffff
TEST_RR_OP(bext, x27, x31, x28, 0x00000000, 0xffffffff, 0xefffffff, x1, 16, x2)

inst_5:
// rs1==x25, rs2==x24, rd==x26, rs2_val == 4160749567, 
// opcode: bext ; op1:x25; op2:x24; dest:x26; op1val:0xffffffff;  op2val:0xf7ffffff
TEST_RR_OP(bext, x26, x25, x24, 0x00000000, 0xffffffff, 0xf7ffffff, x1, 20, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25, rs2_val == 4227858431, 
// opcode: bext ; op1:x24; op2:x26; dest:x25; op1val:0xffffffff;  op2val:0xfbffffff
TEST_RR_OP(bext, x25, x24, x26, 0x00000000, 0xffffffff, 0xfbffffff, x1, 24, x2)

inst_7:
// rs1==x26, rs2==x25, rd==x24, rs2_val == 4261412863, 
// opcode: bext ; op1:x26; op2:x25; dest:x24; op1val:0xffffffff;  op2val:0xfdffffff
TEST_RR_OP(bext, x24, x26, x25, 0x00000000, 0xffffffff, 0xfdffffff, x1, 28, x2)

inst_8:
// rs1==x22, rs2==x21, rd==x23, rs2_val == 4278190079, 
// opcode: bext ; op1:x22; op2:x21; dest:x23; op1val:0xffffffff;  op2val:0xfeffffff
TEST_RR_OP(bext, x23, x22, x21, 0x00000000, 0xffffffff, 0xfeffffff, x1, 32, x2)

inst_9:
// rs1==x21, rs2==x23, rd==x22, rs2_val == 4286578687, 
// opcode: bext ; op1:x21; op2:x23; dest:x22; op1val:0xffffffff;  op2val:0xff7fffff
TEST_RR_OP(bext, x22, x21, x23, 0x00000000, 0xffffffff, 0xff7fffff, x1, 36, x2)

inst_10:
// rs1==x23, rs2==x22, rd==x21, rs2_val == 4290772991, 
// opcode: bext ; op1:x23; op2:x22; dest:x21; op1val:0xffffffff;  op2val:0xffbfffff
TEST_RR_OP(bext, x21, x23, x22, 0x00000000, 0xffffffff, 0xffbfffff, x1, 40, x2)

inst_11:
// rs1==x19, rs2==x18, rd==x20, rs2_val == 4292870143, 
// opcode: bext ; op1:x19; op2:x18; dest:x20; op1val:0xffffffff;  op2val:0xffdfffff
TEST_RR_OP(bext, x20, x19, x18, 0x00000000, 0xffffffff, 0xffdfffff, x1, 44, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, rs2_val == 4293918719, 
// opcode: bext ; op1:x18; op2:x20; dest:x19; op1val:0xffffffff;  op2val:0xffefffff
TEST_RR_OP(bext, x19, x18, x20, 0x00000000, 0xffffffff, 0xffefffff, x1, 48, x2)

inst_13:
// rs1==x20, rs2==x19, rd==x18, rs2_val == 4294443007, 
// opcode: bext ; op1:x20; op2:x19; dest:x18; op1val:0xffffffff;  op2val:0xfff7ffff
TEST_RR_OP(bext, x18, x20, x19, 0x00000000, 0xffffffff, 0xfff7ffff, x1, 52, x2)

inst_14:
// rs1==x16, rs2==x15, rd==x17, rs2_val == 4294705151, 
// opcode: bext ; op1:x16; op2:x15; dest:x17; op1val:0xffffffff;  op2val:0xfffbffff
TEST_RR_OP(bext, x17, x16, x15, 0x00000000, 0xffffffff, 0xfffbffff, x1, 56, x2)

inst_15:
// rs1==x15, rs2==x17, rd==x16, rs2_val == 4294836223, 
// opcode: bext ; op1:x15; op2:x17; dest:x16; op1val:0xffffffff;  op2val:0xfffdffff
TEST_RR_OP(bext, x16, x15, x17, 0x00000000, 0xffffffff, 0xfffdffff, x1, 60, x2)

inst_16:
// rs1==x17, rs2==x16, rd==x15, rs2_val == 4294901759, 
// opcode: bext ; op1:x17; op2:x16; dest:x15; op1val:0xffffffff;  op2val:0xfffeffff
TEST_RR_OP(bext, x15, x17, x16, 0x00000000, 0xffffffff, 0xfffeffff, x1, 64, x2)

inst_17:
// rs1==x13, rs2==x12, rd==x14, rs2_val == 4294934527, 
// opcode: bext ; op1:x13; op2:x12; dest:x14; op1val:0xffffffff;  op2val:0xffff7fff
TEST_RR_OP(bext, x14, x13, x12, 0x00000000, 0xffffffff, 0xffff7fff, x1, 68, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, rs2_val == 4294950911, 
// opcode: bext ; op1:x12; op2:x14; dest:x13; op1val:0xffffffff;  op2val:0xffffbfff
TEST_RR_OP(bext, x13, x12, x14, 0x00000000, 0xffffffff, 0xffffbfff, x1, 72, x2)

inst_19:
// rs1==x14, rs2==x13, rd==x12, rs2_val == 4294959103, 
// opcode: bext ; op1:x14; op2:x13; dest:x12; op1val:0xffffffff;  op2val:0xffffdfff
TEST_RR_OP(bext, x12, x14, x13, 0x00000000, 0xffffffff, 0xffffdfff, x1, 76, x2)

inst_20:
// rs1==x10, rs2==x9, rd==x11, rs2_val == 4294963199, 
// opcode: bext ; op1:x10; op2:x9; dest:x11; op1val:0xffffffff;  op2val:0xffffefff
TEST_RR_OP(bext, x11, x10, x9, 0x00000000, 0xffffffff, 0xffffefff, x1, 80, x2)

inst_21:
// rs1==x9, rs2==x11, rd==x10, rs2_val == 4294965247, 
// opcode: bext ; op1:x9; op2:x11; dest:x10; op1val:0xffffffff;  op2val:0xfffff7ff
TEST_RR_OP(bext, x10, x9, x11, 0x00000000, 0xffffffff, 0xfffff7ff, x1, 84, x2)

inst_22:
// rs1==x11, rs2==x10, rd==x9, rs2_val == 4294966271, 
// opcode: bext ; op1:x11; op2:x10; dest:x9; op1val:0xffffffff;  op2val:0xfffffbff
TEST_RR_OP(bext, x9, x11, x10, 0x00000000, 0xffffffff, 0xfffffbff, x1, 88, x2)

inst_23:
// rs1==x7, rs2==x6, rd==x8, rs2_val == 4294966783, 
// opcode: bext ; op1:x7; op2:x6; dest:x8; op1val:0xffffffff;  op2val:0xfffffdff
TEST_RR_OP(bext, x8, x7, x6, 0x00000000, 0xffffffff, 0xfffffdff, x1, 92, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, rs2_val == 4294967039, 
// opcode: bext ; op1:x6; op2:x8; dest:x7; op1val:0xffffffff;  op2val:0xfffffeff
TEST_RR_OP(bext, x7, x6, x8, 0x00000000, 0xffffffff, 0xfffffeff, x1, 96, x9)

inst_25:
// rs1==x8, rs2==x7, rd==x6, rs2_val == 4294967167, 
// opcode: bext ; op1:x8; op2:x7; dest:x6; op1val:0xffffffff;  op2val:0xffffff7f
TEST_RR_OP(bext, x6, x8, x7, 0x00000000, 0xffffffff, 0xffffff7f, x1, 100, x9)

inst_26:
// rs1==x4, rs2==x3, rd==x5, rs2_val == 4294967231, 
// opcode: bext ; op1:x4; op2:x3; dest:x5; op1val:0xffffffff;  op2val:0xffffffbf
TEST_RR_OP(bext, x5, x4, x3, 0x00000000, 0xffffffff, 0xffffffbf, x1, 104, x9)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_27:
// rs1==x3, rs2==x5, rd==x4, rs2_val == 4294967263, 
// opcode: bext ; op1:x3; op2:x5; dest:x4; op1val:0xffffffff;  op2val:0xffffffdf
TEST_RR_OP(bext, x4, x3, x5, 0x00000000, 0xffffffff, 0xffffffdf, x6, 0, x9)

inst_28:
// rs1==x5, rs2==x4, rd==x3, rs2_val == 4294967279, 
// opcode: bext ; op1:x5; op2:x4; dest:x3; op1val:0xffffffff;  op2val:0xffffffef
TEST_RR_OP(bext, x3, x5, x4, 0x00000000, 0xffffffff, 0xffffffef, x6, 4, x9)

inst_29:
// rs1==x1, rs2==x0, rd==x2, rs2_val == 4294967287, 
// opcode: bext ; op1:x1; op2:x0; dest:x2; op1val:0xffffffff;  op2val:0x0
TEST_RR_OP(bext, x2, x1, x0, 0x00000000, 0xffffffff, 0x0, x6, 8, x9)

inst_30:
// rs1==x0, rs2==x2, rd==x1, rs2_val == 4294967291, 
// opcode: bext ; op1:x0; op2:x2; dest:x1; op1val:0x0;  op2val:0xfffffffb
TEST_RR_OP(bext, x1, x0, x2, 0x00000000, 0x0, 0xfffffffb, x6, 12, x9)

inst_31:
// rs1==x2, rs2==x1, rd==x0, rs2_val == 4294967293, 
// opcode: bext ; op1:x2; op2:x1; dest:x0; op1val:0xffffffff;  op2val:0xfffffffd
TEST_RR_OP(bext, x0, x2, x1, 0x00000000, 0xffffffff, 0xfffffffd, x6, 16, x9)

inst_32:
// rs2_val == 4294967294, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xfffffffe
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0xfffffffe, x6, 20, x9)

inst_33:
// rs1_val == 2147483647, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x7fffffff, 0xffffffff, x6, 24, x9)

inst_34:
// rs1_val == 3221225471, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xbfffffff, 0xffffffff, x6, 28, x9)

inst_35:
// rs1_val == 3758096383, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xdfffffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xdfffffff, 0xffffffff, x6, 32, x9)

inst_36:
// rs1_val == 4026531839, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xefffffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xefffffff, 0xffffffff, x6, 36, x9)

inst_37:
// rs1_val == 4160749567, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xf7ffffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xf7ffffff, 0xffffffff, x6, 40, x9)

inst_38:
// rs1_val == 4227858431, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfbffffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfbffffff, 0xffffffff, x6, 44, x9)

inst_39:
// rs1_val == 4261412863, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfdffffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfdffffff, 0xffffffff, x6, 48, x9)

inst_40:
// rs1_val == 4278190079, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfeffffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfeffffff, 0xffffffff, x6, 52, x9)

inst_41:
// rs1_val == 4286578687, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xff7fffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xff7fffff, 0xffffffff, x6, 56, x9)

inst_42:
// rs1_val == 4290772991, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffbfffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffbfffff, 0xffffffff, x6, 60, x9)

inst_43:
// rs1_val == 4292870143, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffdfffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffdfffff, 0xffffffff, x6, 64, x9)

inst_44:
// rs1_val == 4293918719, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffefffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffefffff, 0xffffffff, x6, 68, x9)

inst_45:
// rs1_val == 4294443007, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfff7ffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfff7ffff, 0xffffffff, x6, 72, x9)

inst_46:
// rs1_val == 4294705151, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffbffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffbffff, 0xffffffff, x6, 76, x9)

inst_47:
// rs1_val == 4294836223, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffdffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffdffff, 0xffffffff, x6, 80, x9)

inst_48:
// rs1_val == 4294901759, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffeffff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffeffff, 0xffffffff, x6, 84, x9)

inst_49:
// rs1_val == 4294934527, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffff7fff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffff7fff, 0xffffffff, x6, 88, x9)

inst_50:
// rs1_val == 4294950911, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffbfff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffbfff, 0xffffffff, x6, 92, x9)

inst_51:
// rs1_val == 4294959103, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffdfff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffdfff, 0xffffffff, x6, 96, x9)

inst_52:
// rs1_val == 4294963199, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffefff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffefff, 0xffffffff, x6, 100, x9)

inst_53:
// rs1_val == 4294965247, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffff7ff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffff7ff, 0xffffffff, x6, 104, x9)

inst_54:
// rs1_val == 4294966271, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffbff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffbff, 0xffffffff, x6, 108, x9)

inst_55:
// rs1_val == 4294966783, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffdff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffdff, 0xffffffff, x6, 112, x9)

inst_56:
// rs1_val == 4294967039, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffeff;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffeff, 0xffffffff, x6, 116, x9)

inst_57:
// rs1_val == 4294967167, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffff7f;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffff7f, 0xffffffff, x6, 120, x9)

inst_58:
// rs1_val == 4294967231, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffbf;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffbf, 0xffffffff, x6, 124, x9)

inst_59:
// rs1_val == 4294967263, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffdf;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffdf, 0xffffffff, x6, 128, x9)

inst_60:
// rs1_val == 4294967279, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffef;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffef, 0xffffffff, x6, 132, x9)

inst_61:
// rs1_val == 4294967287, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff7;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffff7, 0xffffffff, x6, 136, x9)

inst_62:
// rs1_val == 4294967291, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffb;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffffb, 0xffffffff, x6, 140, x9)

inst_63:
// rs1_val == 4294967293, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffffd, 0xffffffff, x6, 144, x9)

inst_64:
// rs1_val == 4294967294, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffffe, 0xffffffff, x6, 148, x9)

inst_65:
// rs2_val == 2147483648, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x80000000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x80000000, x6, 152, x9)

inst_66:
// rs2_val == 1073741824, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x40000000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x40000000, x6, 156, x9)

inst_67:
// rs2_val == 536870912, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x20000000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x20000000, x6, 160, x9)

inst_68:
// rs2_val == 268435456, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x10000000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x10000000, x6, 164, x9)

inst_69:
// rs2_val == 134217728, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x8000000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x8000000, x6, 168, x9)

inst_70:
// rs2_val == 67108864, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x4000000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x4000000, x6, 172, x9)

inst_71:
// rs2_val == 33554432, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x2000000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x2000000, x6, 176, x9)

inst_72:
// rs2_val == 16777216, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x1000000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x1000000, x6, 180, x9)

inst_73:
// rs2_val == 8388608, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x800000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x800000, x6, 184, x9)

inst_74:
// rs2_val == 4194304, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x400000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x400000, x6, 188, x9)

inst_75:
// rs2_val == 2097152, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x200000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x200000, x6, 192, x9)

inst_76:
// rs2_val == 1048576, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x100000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x100000, x6, 196, x9)

inst_77:
// rs2_val == 524288, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x80000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x80000, x6, 200, x9)

inst_78:
// rs2_val == 262144, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x40000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x40000, x6, 204, x9)

inst_79:
// rs2_val == 131072, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x20000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x20000, x6, 208, x9)

inst_80:
// rs2_val == 65536, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x10000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x10000, x6, 212, x9)

inst_81:
// rs2_val == 32768, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x8000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x8000, x6, 216, x9)

inst_82:
// rs2_val == 16384, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x4000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x4000, x6, 220, x9)

inst_83:
// rs2_val == 8192, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x2000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x2000, x6, 224, x9)

inst_84:
// rs2_val == 4096, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x1000
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x1000, x6, 228, x9)

inst_85:
// rs2_val == 2048, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x800
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x800, x6, 232, x9)

inst_86:
// rs2_val == 1024, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x400
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x400, x6, 236, x9)

inst_87:
// rs2_val == 512, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x200
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x200, x6, 240, x9)

inst_88:
// rs2_val == 256, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x100
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x100, x6, 244, x9)

inst_89:
// rs2_val == 128, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x80
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x80, x6, 248, x9)

inst_90:
// rs2_val == 64, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x40
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x40, x6, 252, x9)

inst_91:
// rs2_val == 32, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x20
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x20, x6, 256, x9)

inst_92:
// rs2_val == 16, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x10
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x10, x6, 260, x9)

inst_93:
// rs2_val == 8, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x8
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x8, x6, 264, x9)

inst_94:
// rs2_val == 4, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x4
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x4, x6, 268, x9)

inst_95:
// rs2_val == 2, rs1_val == 0xFFFFFFFF and rs2_val == 0x02 #nosat
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x2
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x2, x6, 272, x9)

inst_96:
// rs2_val == 1, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x1
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x1, x6, 276, x9)

inst_97:
// rs1_val == 2147483648, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x80000000, 0xffffffff, x6, 280, x9)

inst_98:
// rs1_val == 1073741824, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x40000000, 0xffffffff, x6, 284, x9)

inst_99:
// rs1_val == 536870912, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x20000000, 0xffffffff, x6, 288, x9)

inst_100:
// rs1_val == 268435456, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x10000000, 0xffffffff, x6, 292, x9)

inst_101:
// rs1_val == 134217728, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x8000000, 0xffffffff, x6, 296, x9)

inst_102:
// rs1_val == 67108864, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x4000000, 0xffffffff, x6, 300, x9)

inst_103:
// rs1_val == 33554432, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x2000000, 0xffffffff, x6, 304, x9)

inst_104:
// rs1_val == 16777216, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x1000000, 0xffffffff, x6, 308, x9)

inst_105:
// rs1_val == 8388608, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x800000, 0xffffffff, x6, 312, x9)

inst_106:
// rs1_val == 4194304, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x400000, 0xffffffff, x6, 316, x9)

inst_107:
// rs1_val == 2097152, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x200000, 0xffffffff, x6, 320, x9)

inst_108:
// rs1_val == 1048576, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x100000, 0xffffffff, x6, 324, x9)

inst_109:
// rs1_val == 524288, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x80000, 0xffffffff, x6, 328, x9)

inst_110:
// rs1_val == 262144, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x40000, 0xffffffff, x6, 332, x9)

inst_111:
// rs1_val == 131072, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x20000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x20000, 0xffffffff, x6, 336, x9)

inst_112:
// rs1_val == 65536, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x10000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x10000, 0xffffffff, x6, 340, x9)

inst_113:
// rs1_val == 32768, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x8000, 0xffffffff, x6, 344, x9)

inst_114:
// rs1_val == 16384, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x4000, 0xffffffff, x6, 348, x9)

inst_115:
// rs1_val == 8192, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x2000, 0xffffffff, x6, 352, x9)

inst_116:
// rs1_val == 4096, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x1000, 0xffffffff, x6, 356, x9)

inst_117:
// rs1_val == 2048, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x800;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x800, 0xffffffff, x6, 360, x9)

inst_118:
// rs1_val == 1024, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x400, 0xffffffff, x6, 364, x9)

inst_119:
// rs1_val == 512, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x200, 0xffffffff, x6, 368, x9)

inst_120:
// rs1_val == 256, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x100, 0xffffffff, x6, 372, x9)

inst_121:
// rs1_val == 128, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x80, 0xffffffff, x6, 376, x9)

inst_122:
// rs1_val == 64, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x40, 0xffffffff, x6, 380, x9)

inst_123:
// rs1_val == 32, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x20, 0xffffffff, x6, 384, x9)

inst_124:
// rs1_val == 16, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x10, 0xffffffff, x6, 388, x9)

inst_125:
// rs1_val == 8, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x8;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x8, 0xffffffff, x6, 392, x9)

inst_126:
// rs1_val == 4, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x4, 0xffffffff, x6, 396, x9)

inst_127:
// rs1_val == 2, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x2, 0xffffffff, x6, 400, x9)

inst_128:
// rs1_val == 1, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x1, 0xffffffff, x6, 404, x9)

inst_129:
// rs2_val == 0x00 and rs1_val == 0x2DEDB6A7 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x2dedb6a7;  op2val:0x0
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x2dedb6a7, 0x0, x6, 408, x9)

inst_130:
// rs2_val == 0x10 and rs1_val == 0x3C272728 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x3c272728;  op2val:0x10
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x3c272728, 0x10, x6, 412, x9)

inst_131:
// rs2_val == 0x18 and rs1_val == 0x4F55C73D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x4f55c73d;  op2val:0x18
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x4f55c73d, 0x18, x6, 416, x9)

inst_132:
// rs2_val == 0x14 and rs1_val == 0xB0AB577A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xb0ab577a;  op2val:0x14
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xb0ab577a, 0x14, x6, 420, x9)

inst_133:
// rs2_val == 0x1A and rs1_val == 0xF0EB21AA 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xf0eb21aa;  op2val:0x1a
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xf0eb21aa, 0x1a, x6, 424, x9)

inst_134:
// rs2_val == 0x1B and rs1_val == 0xA9E16E27 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xa9e16e27;  op2val:0x1b
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xa9e16e27, 0x1b, x6, 428, x9)

inst_135:
// rs1_val == 0x00000000 and rs2_val == 0x0C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0xc
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x0, 0xc, x6, 432, x9)

inst_136:
// rs1_val == 0x80000000 and rs2_val == 0x05 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x80000000;  op2val:0x5
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x80000000, 0x5, x6, 436, x9)

inst_137:
// rs1_val == 0x40000000 and rs2_val == 0x01 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0x1
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x40000000, 0x1, x6, 440, x9)

inst_138:
// rs1_val == 0x60000000 and rs2_val == 0x18 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x60000000;  op2val:0x18
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x60000000, 0x18, x6, 444, x9)

inst_139:
// rs1_val == 0xB0000000 and rs2_val == 0x1E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xb0000000;  op2val:0x1e
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xb0000000, 0x1e, x6, 448, x9)

inst_140:
// rs1_val == 0x08000000 and rs2_val == 0x1A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0x1a
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x8000000, 0x1a, x6, 452, x9)

inst_141:
// rs1_val == 0xF4000000 and rs2_val == 0x05 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xf4000000;  op2val:0x5
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xf4000000, 0x5, x6, 456, x9)

inst_142:
// rs1_val == 0x82000000 and rs2_val == 0x0A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x82000000;  op2val:0xa
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x82000000, 0xa, x6, 460, x9)

inst_143:
// rs1_val == 0xFD000000 and rs2_val == 0x03 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfd000000;  op2val:0x3
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfd000000, 0x3, x6, 464, x9)

inst_144:
// rs1_val == 0xD8800000 and rs2_val == 0x0A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xd8800000;  op2val:0xa
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xd8800000, 0xa, x6, 468, x9)

inst_145:
// rs1_val == 0xC8C00000 and rs2_val == 0x14 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xc8c00000;  op2val:0x14
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xc8c00000, 0x14, x6, 472, x9)

inst_146:
// rs1_val == 0xA3200000 and rs2_val == 0x08 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xa3200000;  op2val:0x8
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xa3200000, 0x8, x6, 476, x9)

inst_147:
// rs1_val == 0xC7900000 and rs2_val == 0x1B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xc7900000;  op2val:0x1b
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xc7900000, 0x1b, x6, 480, x9)

inst_148:
// rs1_val == 0x46880000 and rs2_val == 0x1C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x46880000;  op2val:0x1c
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x46880000, 0x1c, x6, 484, x9)

inst_149:
// rs1_val == 0x55440000 and rs2_val == 0x1B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x55440000;  op2val:0x1b
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x55440000, 0x1b, x6, 488, x9)

inst_150:
// rs1_val == 0xA56A0000 and rs2_val == 0x0E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xa56a0000;  op2val:0xe
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xa56a0000, 0xe, x6, 492, x9)

inst_151:
// rs1_val == 0x405D0000 and rs2_val == 0x03 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x405d0000;  op2val:0x3
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x405d0000, 0x3, x6, 496, x9)

inst_152:
// rs1_val == 0xCD2F8000 and rs2_val == 0x05 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xcd2f8000;  op2val:0x5
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xcd2f8000, 0x5, x6, 500, x9)

inst_153:
// rs1_val == 0xA6C04000 and rs2_val == 0x19 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xa6c04000;  op2val:0x19
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xa6c04000, 0x19, x6, 504, x9)

inst_154:
// rs1_val == 0x33BC2000 and rs2_val == 0x15 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x33bc2000;  op2val:0x15
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x33bc2000, 0x15, x6, 508, x9)

inst_155:
// rs1_val == 0xF1C6B000 and rs2_val == 0x0C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xf1c6b000;  op2val:0xc
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xf1c6b000, 0xc, x6, 512, x9)

inst_156:
// rs1_val == 0xAA3D6800 and rs2_val == 0x0D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xaa3d6800;  op2val:0xd
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xaa3d6800, 0xd, x6, 516, x9)

inst_157:
// rs1_val == 0x7AA5E400 and rs2_val == 0x0A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x7aa5e400;  op2val:0xa
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x7aa5e400, 0xa, x6, 520, x9)

inst_158:
// rs1_val == 0xC1B7AE00 and rs2_val == 0x1C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xc1b7ae00;  op2val:0x1c
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xc1b7ae00, 0x1c, x6, 524, x9)

inst_159:
// rs1_val == 0x4C56BB00 and rs2_val == 0x09 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x4c56bb00;  op2val:0x9
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x4c56bb00, 0x9, x6, 528, x9)

inst_160:
// rs1_val == 0x72C58380 and rs2_val == 0x00 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x72c58380;  op2val:0x0
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x72c58380, 0x0, x6, 532, x9)

inst_161:
// rs1_val == 0x32AB8740 and rs2_val == 0x0E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x32ab8740;  op2val:0xe
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x32ab8740, 0xe, x6, 536, x9)

inst_162:
// rs1_val == 0x96CDF1A0 and rs2_val == 0x1D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x96cdf1a0;  op2val:0x1d
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x96cdf1a0, 0x1d, x6, 540, x9)

inst_163:
// rs1_val == 0xB87A9E30 and rs2_val == 0x11 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xb87a9e30;  op2val:0x11
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xb87a9e30, 0x11, x6, 544, x9)

inst_164:
// rs1_val == 0x163DFF98 and rs2_val == 0x17 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x163dff98;  op2val:0x17
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x163dff98, 0x17, x6, 548, x9)

inst_165:
// rs1_val == 0x9205D39C and rs2_val == 0x18 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x9205d39c;  op2val:0x18
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x9205d39c, 0x18, x6, 552, x9)

inst_166:
// rs1_val == 0x50A03C5A and rs2_val == 0x16 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x50a03c5a;  op2val:0x16
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x50a03c5a, 0x16, x6, 556, x9)

inst_167:
// rs1_val == 0x797D76DF and rs2_val == 0x11 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x797d76df;  op2val:0x11
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x797d76df, 0x11, x6, 560, x9)

inst_168:
// rs2_val == 0x08 and rs1_val == 0x24496FE3 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x24496fe3;  op2val:0x8
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x24496fe3, 0x8, x6, 564, x9)

inst_169:
// rs2_val == 0x1D and rs1_val == 0xDE14BFF2 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xde14bff2;  op2val:0x1d
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xde14bff2, 0x1d, x6, 568, x9)

inst_170:
// rs2_val == 0x03 and rs1_val == 0xB808A677 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xb808a677;  op2val:0x3
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xb808a677, 0x3, x6, 572, x9)

inst_171:
// rs2_val == 0x07 and rs1_val == 0x76B1FD3D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x76b1fd3d;  op2val:0x7
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x76b1fd3d, 0x7, x6, 576, x9)

inst_172:
// rs2_val == 0x0F and rs1_val == 0x5DCF019D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x5dcf019d;  op2val:0xf
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x5dcf019d, 0xf, x6, 580, x9)

inst_173:
// rs2_val == 0x1F and rs1_val == 0x47B7097B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x47b7097b;  op2val:0x1f
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x47b7097b, 0x1f, x6, 584, x9)

inst_174:
// rs1_val == 0x759F1B44 and rs2_val == 0x10 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x759f1b44;  op2val:0x10
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x759f1b44, 0x10, x6, 588, x9)

inst_175:
// rs1_val == 0x40D90A1D and rs2_val == 0x17 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x40d90a1d;  op2val:0x17
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x40d90a1d, 0x17, x6, 592, x9)

inst_176:
// rs1_val == 0x2DEDF123 and rs2_val == 0x16 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x2dedf123;  op2val:0x16
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x2dedf123, 0x16, x6, 596, x9)

inst_177:
// rs1_val == 0x4B1634E7 and rs2_val == 0x0C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x4b1634e7;  op2val:0xc
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x4b1634e7, 0xc, x6, 600, x9)

inst_178:
// rs1_val == 0x8935B82F and rs2_val == 0x0B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x8935b82f;  op2val:0xb
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x8935b82f, 0xb, x6, 604, x9)

inst_179:
// rs1_val == 0x70BCB8DF and rs2_val == 0x1C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x70bcb8df;  op2val:0x1c
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x70bcb8df, 0x1c, x6, 608, x9)

inst_180:
// rs1_val == 0x8DE1C73F and rs2_val == 0x08 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x8de1c73f;  op2val:0x8
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x8de1c73f, 0x8, x6, 612, x9)

inst_181:
// rs1_val == 0xB0E04E7F and rs2_val == 0x1C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xb0e04e7f;  op2val:0x1c
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xb0e04e7f, 0x1c, x6, 616, x9)

inst_182:
// rs1_val == 0x589218FF and rs2_val == 0x10 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x589218ff;  op2val:0x10
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x589218ff, 0x10, x6, 620, x9)

inst_183:
// rs1_val == 0xA7BE99FF and rs2_val == 0x07 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xa7be99ff;  op2val:0x7
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xa7be99ff, 0x7, x6, 624, x9)

inst_184:
// rs1_val == 0xA37E33FF and rs2_val == 0x14 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xa37e33ff;  op2val:0x14
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xa37e33ff, 0x14, x6, 628, x9)

inst_185:
// rs1_val == 0xE37D37FF and rs2_val == 0x1B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xe37d37ff;  op2val:0x1b
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xe37d37ff, 0x1b, x6, 632, x9)

inst_186:
// rs1_val == 0xABB4CFFF and rs2_val == 0x17 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xabb4cfff;  op2val:0x17
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xabb4cfff, 0x17, x6, 636, x9)

inst_187:
// rs1_val == 0x7C9DDFFF and rs2_val == 0x1B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x7c9ddfff;  op2val:0x1b
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x7c9ddfff, 0x1b, x6, 640, x9)

inst_188:
// rs1_val == 0x5B11BFFF and rs2_val == 0x0E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x5b11bfff;  op2val:0xe
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x5b11bfff, 0xe, x6, 644, x9)

inst_189:
// rs1_val == 0xCB347FFF and rs2_val == 0x10 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xcb347fff;  op2val:0x10
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xcb347fff, 0x10, x6, 648, x9)

inst_190:
// rs1_val == 0xF306FFFF and rs2_val == 0x08 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xf306ffff;  op2val:0x8
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xf306ffff, 0x8, x6, 652, x9)

inst_191:
// rs1_val == 0xBEA5FFFF and rs2_val == 0x1B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xbea5ffff;  op2val:0x1b
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xbea5ffff, 0x1b, x6, 656, x9)

inst_192:
// rs1_val == 0xD38BFFFF and rs2_val == 0x1C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xd38bffff;  op2val:0x1c
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xd38bffff, 0x1c, x6, 660, x9)

inst_193:
// rs1_val == 0x15B7FFFF and rs2_val == 0x10 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x15b7ffff;  op2val:0x10
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x15b7ffff, 0x10, x6, 664, x9)

inst_194:
// rs1_val == 0xD58FFFFF and rs2_val == 0x09 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xd58fffff;  op2val:0x9
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xd58fffff, 0x9, x6, 668, x9)

inst_195:
// rs1_val == 0xFE1FFFFF and rs2_val == 0x11 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfe1fffff;  op2val:0x11
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfe1fffff, 0x11, x6, 672, x9)

inst_196:
// rs1_val == 0x203FFFFF and rs2_val == 0x00 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x203fffff;  op2val:0x0
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x203fffff, 0x0, x6, 676, x9)

inst_197:
// rs1_val == 0x077FFFFF and rs2_val == 0x1B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x77fffff;  op2val:0x1b
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x77fffff, 0x1b, x6, 680, x9)

inst_198:
// rs1_val == 0xBEFFFFFF and rs2_val == 0x12 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xbeffffff;  op2val:0x12
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xbeffffff, 0x12, x6, 684, x9)

inst_199:
// rs1_val == 0x89FFFFFF and rs2_val == 0x0D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x89ffffff;  op2val:0xd
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x89ffffff, 0xd, x6, 688, x9)

inst_200:
// rs1_val == 0x23FFFFFF and rs2_val == 0x04 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x23ffffff;  op2val:0x4
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x23ffffff, 0x4, x6, 692, x9)

inst_201:
// rs1_val == 0xA7FFFFFF and rs2_val == 0x0B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xa7ffffff;  op2val:0xb
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xa7ffffff, 0xb, x6, 696, x9)

inst_202:
// rs1_val == 0xCFFFFFFF and rs2_val == 0x0E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xcfffffff;  op2val:0xe
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xcfffffff, 0xe, x6, 700, x9)

inst_203:
// rs1_val == 0x9FFFFFFF and rs2_val == 0x09 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x9fffffff;  op2val:0x9
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x9fffffff, 0x9, x6, 704, x9)

inst_204:
// rs1_val == 0xBFFFFFFF and rs2_val == 0x0E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xbfffffff;  op2val:0xe
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xbfffffff, 0xe, x6, 708, x9)

inst_205:
// rs1_val == 0x7FFFFFFF and rs2_val == 0x0B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0xb
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x7fffffff, 0xb, x6, 712, x9)

inst_206:
// rs1_val == 0xFFFFFFFF and rs2_val == 0x12 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x12
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x12, x6, 716, x9)

inst_207:
// rs2_val == 0x1B and rs1_val == 0x164F1513 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x164f1513;  op2val:0x1b
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x164f1513, 0x1b, x6, 720, x9)

inst_208:
// rs2_val == 0x09 and rs1_val == 0xACC6D8F2 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xacc6d8f2;  op2val:0x9
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xacc6d8f2, 0x9, x6, 724, x9)

inst_209:
// rs2_val == 0x06 and rs1_val == 0xA123F501 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xa123f501;  op2val:0x6
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xa123f501, 0x6, x6, 728, x9)

inst_210:
// rs2_val == 0x02 and rs1_val == 0xB57A6A1D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xb57a6a1d;  op2val:0x2
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xb57a6a1d, 0x2, x6, 732, x9)

inst_211:
// rs2_val == 0x01 and rs1_val == 0xE90794DF 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xe90794df;  op2val:0x1
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xe90794df, 0x1, x6, 736, x9)

inst_212:
// rs2_val == 0x00 and rs1_val == 0xAF5570EE 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xaf5570ee;  op2val:0x0
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xaf5570ee, 0x0, x6, 740, x9)

inst_213:
// rs1_val == 0xF542441E and rs2_val == 0x01 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xf542441e;  op2val:0x1
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xf542441e, 0x1, x6, 744, x9)

inst_214:
// rs1_val == 0x62F28D1B and rs2_val == 0x04 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x62f28d1b;  op2val:0x4
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x62f28d1b, 0x4, x6, 748, x9)

inst_215:
// rs1_val == 0x38B9B45D and rs2_val == 0x12 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x38b9b45d;  op2val:0x12
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x38b9b45d, 0x12, x6, 752, x9)

inst_216:
// rs1_val == 0x16809A12 and rs2_val == 0x06 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x16809a12;  op2val:0x6
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x16809a12, 0x6, x6, 756, x9)

inst_217:
// rs1_val == 0x082A1750 and rs2_val == 0x06 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x82a1750;  op2val:0x6
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x82a1750, 0x6, x6, 760, x9)

inst_218:
// rs1_val == 0x079DD25B and rs2_val == 0x04 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x79dd25b;  op2val:0x4
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x79dd25b, 0x4, x6, 764, x9)

inst_219:
// rs1_val == 0x034C687B and rs2_val == 0x12 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x34c687b;  op2val:0x12
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x34c687b, 0x12, x6, 768, x9)

inst_220:
// rs1_val == 0x01B601FD and rs2_val == 0x0E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x1b601fd;  op2val:0xe
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x1b601fd, 0xe, x6, 772, x9)

inst_221:
// rs1_val == 0x00B302FD and rs2_val == 0x10 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xb302fd;  op2val:0x10
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xb302fd, 0x10, x6, 776, x9)

inst_222:
// rs1_val == 0x0062A6B3 and rs2_val == 0x05 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x62a6b3;  op2val:0x5
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x62a6b3, 0x5, x6, 780, x9)

inst_223:
// rs1_val == 0x00339238 and rs2_val == 0x11 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x339238;  op2val:0x11
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x339238, 0x11, x6, 784, x9)

inst_224:
// rs1_val == 0x00164AF0 and rs2_val == 0x05 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x164af0;  op2val:0x5
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x164af0, 0x5, x6, 788, x9)

inst_225:
// rs1_val == 0x0009222A and rs2_val == 0x00 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x9222a;  op2val:0x0
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x9222a, 0x0, x6, 792, x9)

inst_226:
// rs1_val == 0x0006284E and rs2_val == 0x12 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x6284e;  op2val:0x12
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x6284e, 0x12, x6, 796, x9)

inst_227:
// rs1_val == 0x00035161 and rs2_val == 0x0E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x35161;  op2val:0xe
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x35161, 0xe, x6, 800, x9)

inst_228:
// rs1_val == 0x00011E24 and rs2_val == 0x0C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x11e24;  op2val:0xc
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x11e24, 0xc, x6, 804, x9)

inst_229:
// rs1_val == 0x0000F614 and rs2_val == 0x1C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xf614;  op2val:0x1c
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xf614, 0x1c, x6, 808, x9)

inst_230:
// rs1_val == 0x00005CC1 and rs2_val == 0x1D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x5cc1;  op2val:0x1d
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x5cc1, 0x1d, x6, 812, x9)

inst_231:
// rs1_val == 0x00003226 and rs2_val == 0x01 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x3226;  op2val:0x1
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x3226, 0x1, x6, 816, x9)

inst_232:
// rs1_val == 0x00001D0C and rs2_val == 0x0F 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x1d0c;  op2val:0xf
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x1d0c, 0xf, x6, 820, x9)

inst_233:
// rs1_val == 0x00000DD4 and rs2_val == 0x02 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xdd4;  op2val:0x2
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xdd4, 0x2, x6, 824, x9)

inst_234:
// rs1_val == 0x000005D1 and rs2_val == 0x04 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x5d1;  op2val:0x4
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x5d1, 0x4, x6, 828, x9)

inst_235:
// rs1_val == 0x000002A7 and rs2_val == 0x00 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x2a7;  op2val:0x0
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x2a7, 0x0, x6, 832, x9)

inst_236:
// rs1_val == 0x00000197 and rs2_val == 0x0A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x197;  op2val:0xa
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x197, 0xa, x6, 836, x9)

inst_237:
// rs1_val == 0x000000B9 and rs2_val == 0x1C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xb9;  op2val:0x1c
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xb9, 0x1c, x6, 840, x9)

inst_238:
// rs1_val == 0x0000004C and rs2_val == 0x19 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x4c;  op2val:0x19
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x4c, 0x19, x6, 844, x9)

inst_239:
// rs1_val == 0x00000026 and rs2_val == 0x02 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x26;  op2val:0x2
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x26, 0x2, x6, 848, x9)

inst_240:
// rs1_val == 0x00000012 and rs2_val == 0x09 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x12;  op2val:0x9
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x12, 0x9, x6, 852, x9)

inst_241:
// rs1_val == 0x0000000C and rs2_val == 0x1C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xc;  op2val:0x1c
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xc, 0x1c, x6, 856, x9)

inst_242:
// rs1_val == 0x00000006 and rs2_val == 0x0B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x6;  op2val:0xb
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x6, 0xb, x6, 860, x9)

inst_243:
// rs1_val == 0x00000003 and rs2_val == 0x1E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x3;  op2val:0x1e
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x3, 0x1e, x6, 864, x9)

inst_244:
// rs1_val == 0x00000001 and rs2_val == 0x0C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0xc
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x1, 0xc, x6, 868, x9)

inst_245:
// rs1_val == 0x00000000 and rs2_val == 0x1D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1d
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x0, 0x1d, x6, 872, x9)

inst_246:
// rs2_val == 0x0F and rs1_val == 0x59432A19 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x59432a19;  op2val:0xf
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x59432a19, 0xf, x6, 876, x9)

inst_247:
// rs2_val == 0x17 and rs1_val == 0xCEB506F6 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xceb506f6;  op2val:0x17
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xceb506f6, 0x17, x6, 880, x9)

inst_248:
// rs2_val == 0x18 and rs1_val == 0xC5EC6148 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xc5ec6148;  op2val:0x18
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xc5ec6148, 0x18, x6, 884, x9)

inst_249:
// rs2_val == 0x1D and rs1_val == 0x99EF1857 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x99ef1857;  op2val:0x1d
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x99ef1857, 0x1d, x6, 888, x9)

inst_250:
// rs2_val == 0x1E and rs1_val == 0x14B91C79 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x14b91c79;  op2val:0x1e
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x14b91c79, 0x1e, x6, 892, x9)

inst_251:
// rs2_val == 0x1F and rs1_val == 0x0973E89C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x973e89c;  op2val:0x1f
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x973e89c, 0x1f, x6, 896, x9)

inst_252:
// rs1_val == 0x7843BDB9 and rs2_val == 0x1A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x7843bdb9;  op2val:0x1a
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x7843bdb9, 0x1a, x6, 900, x9)

inst_253:
// rs1_val == 0x9798C9D0 and rs2_val == 0x0E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0x9798c9d0;  op2val:0xe
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0x9798c9d0, 0xe, x6, 904, x9)

inst_254:
// rs1_val == 0xD814D576 and rs2_val == 0x0A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xd814d576;  op2val:0xa
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xd814d576, 0xa, x6, 908, x9)

inst_255:
// rs1_val == 0xE0A37559 and rs2_val == 0x14 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xe0a37559;  op2val:0x14
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xe0a37559, 0x14, x6, 912, x9)

inst_256:
// rs1_val == 0xF79FB998 and rs2_val == 0x1E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xf79fb998;  op2val:0x1e
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xf79fb998, 0x1e, x6, 916, x9)

inst_257:
// rs1_val == 0xF87A2561 and rs2_val == 0x1C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xf87a2561;  op2val:0x1c
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xf87a2561, 0x1c, x6, 920, x9)

inst_258:
// rs1_val == 0xFDA56D7F and rs2_val == 0x0F 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfda56d7f;  op2val:0xf
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfda56d7f, 0xf, x6, 924, x9)

inst_259:
// rs1_val == 0xFE4DEAB5 and rs2_val == 0x17 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfe4deab5;  op2val:0x17
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfe4deab5, 0x17, x6, 928, x9)

inst_260:
// rs1_val == 0xFF6875BB and rs2_val == 0x13 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xff6875bb;  op2val:0x13
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xff6875bb, 0x13, x6, 932, x9)

inst_261:
// rs1_val == 0xFF93D0E4 and rs2_val == 0x08 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xff93d0e4;  op2val:0x8
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xff93d0e4, 0x8, x6, 936, x9)

inst_262:
// rs1_val == 0xFFD4AA23 and rs2_val == 0x00 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffd4aa23;  op2val:0x0
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffd4aa23, 0x0, x6, 940, x9)

inst_263:
// rs1_val == 0xFFE2FC91 and rs2_val == 0x18 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffe2fc91;  op2val:0x18
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffe2fc91, 0x18, x6, 944, x9)

inst_264:
// rs1_val == 0xFFF1D2A0 and rs2_val == 0x1C 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfff1d2a0;  op2val:0x1c
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfff1d2a0, 0x1c, x6, 948, x9)

inst_265:
// rs1_val == 0xFFF904D1 and rs2_val == 0x0F 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfff904d1;  op2val:0xf
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfff904d1, 0xf, x6, 952, x9)

inst_266:
// rs1_val == 0xFFFCDB0B and rs2_val == 0x1D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffcdb0b;  op2val:0x1d
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffcdb0b, 0x1d, x6, 956, x9)

inst_267:
// rs1_val == 0xFFFEC2B4 and rs2_val == 0x17 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffec2b4;  op2val:0x17
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffec2b4, 0x17, x6, 960, x9)

inst_268:
// rs1_val == 0xFFFF1E5F and rs2_val == 0x13 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffff1e5f;  op2val:0x13
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffff1e5f, 0x13, x6, 964, x9)

inst_269:
// rs1_val == 0xFFFFA2EE and rs2_val == 0x0B 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffa2ee;  op2val:0xb
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffa2ee, 0xb, x6, 968, x9)

inst_270:
// rs1_val == 0xFFFFD410 and rs2_val == 0x10 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffd410;  op2val:0x10
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffd410, 0x10, x6, 972, x9)

inst_271:
// rs1_val == 0xFFFFEE0A and rs2_val == 0x1A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffee0a;  op2val:0x1a
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffee0a, 0x1a, x6, 976, x9)

inst_272:
// rs1_val == 0xFFFFF32A and rs2_val == 0x16 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffff32a;  op2val:0x16
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffff32a, 0x16, x6, 980, x9)

inst_273:
// rs1_val == 0xFFFFFB84 and rs2_val == 0x08 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffb84;  op2val:0x8
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffb84, 0x8, x6, 984, x9)

inst_274:
// rs1_val == 0xFFFFFC1D and rs2_val == 0x1A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffc1d;  op2val:0x1a
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffc1d, 0x1a, x6, 988, x9)

inst_275:
// rs1_val == 0xFFFFFE31 and rs2_val == 0x17 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffe31;  op2val:0x17
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffe31, 0x17, x6, 992, x9)

inst_276:
// rs1_val == 0xFFFFFF44 and rs2_val == 0x04 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffff44;  op2val:0x4
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffff44, 0x4, x6, 996, x9)

inst_277:
// rs1_val == 0xFFFFFFBA and rs2_val == 0x1F 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffba;  op2val:0x1f
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffba, 0x1f, x6, 1000, x9)

inst_278:
// rs1_val == 0xFFFFFFC6 and rs2_val == 0x0A 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffc6;  op2val:0xa
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffc6, 0xa, x6, 1004, x9)

inst_279:
// rs1_val == 0xFFFFFFE8 and rs2_val == 0x11 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffe8;  op2val:0x11
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffe8, 0x11, x6, 1008, x9)

inst_280:
// rs1_val == 0xFFFFFFF2 and rs2_val == 0x1F 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff2;  op2val:0x1f
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffff2, 0x1f, x6, 1012, x9)

inst_281:
// rs1_val == 0xFFFFFFF9 and rs2_val == 0x1D 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffff9;  op2val:0x1d
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffff9, 0x1d, x6, 1016, x9)

inst_282:
// rs1_val == 0xFFFFFFFD and rs2_val == 0x00 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffd;  op2val:0x0
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffffd, 0x0, x6, 1020, x9)

inst_283:
// rs1_val == 0xFFFFFFFE and rs2_val == 0x1E 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xfffffffe;  op2val:0x1e
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xfffffffe, 0x1e, x6, 1024, x9)

inst_284:
// rs2_val == 2863311530, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xaaaaaaaa
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0xaaaaaaaa, x6, 1028, x9)

inst_285:
// rs2_val == 1431655765, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x55555555
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x55555555, x6, 1032, x9)

inst_286:
// rs1_val == 2863311530, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xaaaaaaaa;  op2val:0xffffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xaaaaaaaa, 0xffffffff, x6, 1036, x9)

inst_287:
// rs2_val == 2147483647, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0x7fffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0x7fffffff, x6, 1040, x9)

inst_288:
// rs2_val == 3758096383, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xdfffffff
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0xdfffffff, x6, 1044, x9)

inst_289:
// rs2_val == 4294967287, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xfffffff7
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0xfffffff7, x6, 1048, x9)

inst_290:
// rs2_val == 4294967291, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xfffffffb
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0xfffffffb, x6, 1052, x9)

inst_291:
// rs2_val == 4294967293, 
// opcode: bext ; op1:x30; op2:x29; dest:x31; op1val:0xffffffff;  op2val:0xfffffffd
TEST_RR_OP(bext, x31, x30, x29, 0x00000000, 0xffffffff, 0xfffffffd, x6, 1056, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 27*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 265*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END

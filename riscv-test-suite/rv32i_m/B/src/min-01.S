
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.5.9
// timestamp : Thu Feb 17 18:59:38 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/anku/bmanip/riscv-ctg/sample_cgfs/rv32i_b.cgf \
 \
//                  -- xlen 32  \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the min instruction of the RISC-V RV32B,RV32Zbb extension for the min covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IB,RV32IZbb")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*B.*);def TEST_CASE_1=True;",min)

RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*Zbb.*);def TEST_CASE_1=True;",min)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1, rs1==x30, rs2==x31, rd==x31, rs1_val != rs2_val, rs2_val == 1, rs1_val == 0
// opcode: min ; op1:x30; op2:x31; dest:x31; op1val:0x0;  op2val:0x1
TEST_RR_OP(min, x31, x30, x31, 0x00000000, 0x0, 0x1, x1, 0, x2)

inst_1:
// rs1 == rs2 == rd, rs1==x29, rs2==x29, rd==x29, rs2_val == 2147483647, rs2_val == (2**(xlen-1)-1)
// opcode: min ; op1:x29; op2:x29; dest:x29; op1val:0x0;  op2val:0x0
TEST_RR_OP(min, x29, x29, x29, 0x00000000, 0x0, 0x0, x1, 4, x2)

inst_2:
// rs1 == rd != rs2, rs1==x28, rs2==x30, rd==x28, rs2_val == -1073741825, 
// opcode: min ; op1:x28; op2:x30; dest:x28; op1val:0x0;  op2val:-0x40000001
TEST_RR_OP(min, x28, x28, x30, 0x00000000, 0x0, -0x40000001, x1, 8, x2)

inst_3:
// rs1 == rs2 != rd, rs1==x27, rs2==x27, rd==x30, rs2_val == -536870913, 
// opcode: min ; op1:x27; op2:x27; dest:x30; op1val:0x0;  op2val:0x0
TEST_RR_OP(min, x30, x27, x27, 0x00000000, 0x0, 0x0, x1, 12, x2)

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x31, rs2==x28, rd==x27, rs2_val == -268435457, 
// opcode: min ; op1:x31; op2:x28; dest:x27; op1val:0x0;  op2val:-0x10000001
TEST_RR_OP(min, x27, x31, x28, 0x00000000, 0x0, -0x10000001, x1, 16, x2)

inst_5:
// rs1==x25, rs2==x24, rd==x26, rs2_val == -134217729, 
// opcode: min ; op1:x25; op2:x24; dest:x26; op1val:0x0;  op2val:-0x8000001
TEST_RR_OP(min, x26, x25, x24, 0x00000000, 0x0, -0x8000001, x1, 20, x2)

inst_6:
// rs1==x24, rs2==x26, rd==x25, rs2_val == -67108865, 
// opcode: min ; op1:x24; op2:x26; dest:x25; op1val:0x0;  op2val:-0x4000001
TEST_RR_OP(min, x25, x24, x26, 0x00000000, 0x0, -0x4000001, x1, 24, x2)

inst_7:
// rs1==x26, rs2==x25, rd==x24, rs2_val == -33554433, 
// opcode: min ; op1:x26; op2:x25; dest:x24; op1val:0x0;  op2val:-0x2000001
TEST_RR_OP(min, x24, x26, x25, 0x00000000, 0x0, -0x2000001, x1, 28, x2)

inst_8:
// rs1==x22, rs2==x21, rd==x23, rs2_val == -16777217, 
// opcode: min ; op1:x22; op2:x21; dest:x23; op1val:0x0;  op2val:-0x1000001
TEST_RR_OP(min, x23, x22, x21, 0x00000000, 0x0, -0x1000001, x1, 32, x2)

inst_9:
// rs1==x21, rs2==x23, rd==x22, rs2_val == -8388609, 
// opcode: min ; op1:x21; op2:x23; dest:x22; op1val:0x0;  op2val:-0x800001
TEST_RR_OP(min, x22, x21, x23, 0x00000000, 0x0, -0x800001, x1, 36, x2)

inst_10:
// rs1==x23, rs2==x22, rd==x21, rs2_val == -4194305, 
// opcode: min ; op1:x23; op2:x22; dest:x21; op1val:0x0;  op2val:-0x400001
TEST_RR_OP(min, x21, x23, x22, 0x00000000, 0x0, -0x400001, x1, 40, x2)

inst_11:
// rs1==x19, rs2==x18, rd==x20, rs2_val == -2097153, 
// opcode: min ; op1:x19; op2:x18; dest:x20; op1val:0x0;  op2val:-0x200001
TEST_RR_OP(min, x20, x19, x18, 0x00000000, 0x0, -0x200001, x1, 44, x2)

inst_12:
// rs1==x18, rs2==x20, rd==x19, rs2_val == -1048577, 
// opcode: min ; op1:x18; op2:x20; dest:x19; op1val:0x0;  op2val:-0x100001
TEST_RR_OP(min, x19, x18, x20, 0x00000000, 0x0, -0x100001, x1, 48, x2)

inst_13:
// rs1==x20, rs2==x19, rd==x18, rs2_val == -524289, 
// opcode: min ; op1:x20; op2:x19; dest:x18; op1val:0x0;  op2val:-0x80001
TEST_RR_OP(min, x18, x20, x19, 0x00000000, 0x0, -0x80001, x1, 52, x2)

inst_14:
// rs1==x16, rs2==x15, rd==x17, rs2_val == -262145, 
// opcode: min ; op1:x16; op2:x15; dest:x17; op1val:0x0;  op2val:-0x40001
TEST_RR_OP(min, x17, x16, x15, 0x00000000, 0x0, -0x40001, x1, 56, x2)

inst_15:
// rs1==x15, rs2==x17, rd==x16, rs2_val == -131073, 
// opcode: min ; op1:x15; op2:x17; dest:x16; op1val:0x0;  op2val:-0x20001
TEST_RR_OP(min, x16, x15, x17, 0x00000000, 0x0, -0x20001, x1, 60, x2)

inst_16:
// rs1==x17, rs2==x16, rd==x15, rs2_val == -65537, 
// opcode: min ; op1:x17; op2:x16; dest:x15; op1val:0x0;  op2val:-0x10001
TEST_RR_OP(min, x15, x17, x16, 0x00000000, 0x0, -0x10001, x1, 64, x2)

inst_17:
// rs1==x13, rs2==x12, rd==x14, rs2_val == -32769, 
// opcode: min ; op1:x13; op2:x12; dest:x14; op1val:0x0;  op2val:-0x8001
TEST_RR_OP(min, x14, x13, x12, 0x00000000, 0x0, -0x8001, x1, 68, x2)

inst_18:
// rs1==x12, rs2==x14, rd==x13, rs2_val == -16385, 
// opcode: min ; op1:x12; op2:x14; dest:x13; op1val:0x0;  op2val:-0x4001
TEST_RR_OP(min, x13, x12, x14, 0x00000000, 0x0, -0x4001, x1, 72, x2)

inst_19:
// rs1==x14, rs2==x13, rd==x12, rs2_val == -8193, 
// opcode: min ; op1:x14; op2:x13; dest:x12; op1val:0x0;  op2val:-0x2001
TEST_RR_OP(min, x12, x14, x13, 0x00000000, 0x0, -0x2001, x1, 76, x2)

inst_20:
// rs1==x10, rs2==x9, rd==x11, rs2_val == -4097, 
// opcode: min ; op1:x10; op2:x9; dest:x11; op1val:0x0;  op2val:-0x1001
TEST_RR_OP(min, x11, x10, x9, 0x00000000, 0x0, -0x1001, x1, 80, x2)

inst_21:
// rs1==x9, rs2==x11, rd==x10, rs2_val == -2049, 
// opcode: min ; op1:x9; op2:x11; dest:x10; op1val:0x0;  op2val:-0x801
TEST_RR_OP(min, x10, x9, x11, 0x00000000, 0x0, -0x801, x1, 84, x2)

inst_22:
// rs1==x11, rs2==x10, rd==x9, rs2_val == -1025, 
// opcode: min ; op1:x11; op2:x10; dest:x9; op1val:0x0;  op2val:-0x401
TEST_RR_OP(min, x9, x11, x10, 0x00000000, 0x0, -0x401, x1, 88, x2)

inst_23:
// rs1==x7, rs2==x6, rd==x8, rs2_val == -513, 
// opcode: min ; op1:x7; op2:x6; dest:x8; op1val:0x0;  op2val:-0x201
TEST_RR_OP(min, x8, x7, x6, 0x00000000, 0x0, -0x201, x1, 92, x2)

inst_24:
// rs1==x6, rs2==x8, rd==x7, rs2_val == -257, 
// opcode: min ; op1:x6; op2:x8; dest:x7; op1val:0x0;  op2val:-0x101
TEST_RR_OP(min, x7, x6, x8, 0x00000000, 0x0, -0x101, x1, 96, x9)

inst_25:
// rs1==x8, rs2==x7, rd==x6, rs2_val == -129, 
// opcode: min ; op1:x8; op2:x7; dest:x6; op1val:0x0;  op2val:-0x81
TEST_RR_OP(min, x6, x8, x7, 0x00000000, 0x0, -0x81, x1, 100, x9)

inst_26:
// rs1==x4, rs2==x3, rd==x5, rs2_val == -65, 
// opcode: min ; op1:x4; op2:x3; dest:x5; op1val:0x0;  op2val:-0x41
TEST_RR_OP(min, x5, x4, x3, 0x00000000, 0x0, -0x41, x1, 104, x9)
RVTEST_SIGBASE(x6,signature_x6_0)

inst_27:
// rs1==x3, rs2==x5, rd==x4, rs2_val == -33, 
// opcode: min ; op1:x3; op2:x5; dest:x4; op1val:0x0;  op2val:-0x21
TEST_RR_OP(min, x4, x3, x5, 0x00000000, 0x0, -0x21, x6, 0, x9)

inst_28:
// rs1==x5, rs2==x4, rd==x3, rs2_val == -17, 
// opcode: min ; op1:x5; op2:x4; dest:x3; op1val:0x0;  op2val:-0x11
TEST_RR_OP(min, x3, x5, x4, 0x00000000, 0x0, -0x11, x6, 4, x9)

inst_29:
// rs1==x1, rs2==x0, rd==x2, rs2_val == -9, 
// opcode: min ; op1:x1; op2:x0; dest:x2; op1val:0x0;  op2val:0x0
TEST_RR_OP(min, x2, x1, x0, 0x00000000, 0x0, 0x0, x6, 8, x9)

inst_30:
// rs1==x0, rs2==x2, rd==x1, rs2_val == -5, 
// opcode: min ; op1:x0; op2:x2; dest:x1; op1val:0x0;  op2val:-0x5
TEST_RR_OP(min, x1, x0, x2, 0x00000000, 0x0, -0x5, x6, 12, x9)

inst_31:
// rs1==x2, rs2==x1, rd==x0, rs2_val == -3, 
// opcode: min ; op1:x2; op2:x1; dest:x0; op1val:0x0;  op2val:-0x3
TEST_RR_OP(min, x0, x2, x1, 0x00000000, 0x0, -0x3, x6, 16, x9)

inst_32:
// rs2_val == -2, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x2
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x2, x6, 20, x9)

inst_33:
// rs1_val == 2147483647, rs1_val == (2**(xlen-1)-1), rs2_val == 0
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x7fffffff;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x7fffffff, 0x0, x6, 24, x9)

inst_34:
// rs1_val == -1073741825, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x40000001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x40000001, 0x0, x6, 28, x9)

inst_35:
// rs1_val == -536870913, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x20000001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x20000001, 0x0, x6, 32, x9)

inst_36:
// rs1_val == -268435457, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x10000001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x10000001, 0x0, x6, 36, x9)

inst_37:
// rs1_val == -134217729, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x8000001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x8000001, 0x0, x6, 40, x9)

inst_38:
// rs1_val == -67108865, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x4000001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x4000001, 0x0, x6, 44, x9)

inst_39:
// rs1_val == -33554433, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x2000001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x2000001, 0x0, x6, 48, x9)

inst_40:
// rs1_val == -16777217, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1000001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1000001, 0x0, x6, 52, x9)

inst_41:
// rs1_val == -8388609, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x800001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x800001, 0x0, x6, 56, x9)

inst_42:
// rs1_val == -4194305, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x400001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x400001, 0x0, x6, 60, x9)

inst_43:
// rs1_val == -2097153, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x200001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x200001, 0x0, x6, 64, x9)

inst_44:
// rs1_val == -1048577, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x100001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x100001, 0x0, x6, 68, x9)

inst_45:
// rs1_val == -524289, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x80001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x80001, 0x0, x6, 72, x9)

inst_46:
// rs1_val == -262145, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x40001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x40001, 0x0, x6, 76, x9)

inst_47:
// rs1_val == -131073, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x20001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x20001, 0x0, x6, 80, x9)

inst_48:
// rs1_val == -65537, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x10001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x10001, 0x0, x6, 84, x9)

inst_49:
// rs1_val == -32769, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x8001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x8001, 0x0, x6, 88, x9)

inst_50:
// rs1_val == -16385, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x4001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x4001, 0x0, x6, 92, x9)

inst_51:
// rs1_val == -8193, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x2001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x2001, 0x0, x6, 96, x9)

inst_52:
// rs1_val == -4097, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1001;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1001, 0x0, x6, 100, x9)

inst_53:
// rs1_val == -2049, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x801;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x801, 0x0, x6, 104, x9)

inst_54:
// rs1_val == -1025, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x401;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x401, 0x0, x6, 108, x9)

inst_55:
// rs1_val == -513, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x201;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x201, 0x0, x6, 112, x9)

inst_56:
// rs1_val == -257, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x101;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x101, 0x0, x6, 116, x9)

inst_57:
// rs1_val == -129, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x81;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x81, 0x0, x6, 120, x9)

inst_58:
// rs1_val == -65, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x41;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x41, 0x0, x6, 124, x9)

inst_59:
// rs1_val == -33, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x21;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x21, 0x0, x6, 128, x9)

inst_60:
// rs1_val == -17, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x11;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x11, 0x0, x6, 132, x9)

inst_61:
// rs1_val == -9, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x9;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x9, 0x0, x6, 136, x9)

inst_62:
// rs1_val == -5, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x5;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x5, 0x0, x6, 140, x9)

inst_63:
// rs1_val == -3, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x3;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x3, 0x0, x6, 144, x9)

inst_64:
// rs1_val == -2, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x2;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x2, 0x0, x6, 148, x9)

inst_65:
// rs2_val == -2147483648, rs2_val == (-2**(xlen-1))
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x80000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x80000000, x6, 152, x9)

inst_66:
// rs2_val == 1073741824, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x40000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x40000000, x6, 156, x9)

inst_67:
// rs2_val == 536870912, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x20000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x20000000, x6, 160, x9)

inst_68:
// rs2_val == 268435456, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x10000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x10000000, x6, 164, x9)

inst_69:
// rs2_val == 134217728, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x8000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x8000000, x6, 168, x9)

inst_70:
// rs2_val == 67108864, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x4000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x4000000, x6, 172, x9)

inst_71:
// rs2_val == 33554432, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x2000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x2000000, x6, 176, x9)

inst_72:
// rs2_val == 16777216, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1000000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x1000000, x6, 180, x9)

inst_73:
// rs2_val == 8388608, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x800000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x800000, x6, 184, x9)

inst_74:
// rs2_val == 4194304, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x400000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x400000, x6, 188, x9)

inst_75:
// rs2_val == 2097152, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x200000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x200000, x6, 192, x9)

inst_76:
// rs2_val == 1048576, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x100000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x100000, x6, 196, x9)

inst_77:
// rs2_val == 524288, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x80000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x80000, x6, 200, x9)

inst_78:
// rs2_val == 262144, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x40000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x40000, x6, 204, x9)

inst_79:
// rs2_val == 131072, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x20000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x20000, x6, 208, x9)

inst_80:
// rs2_val == 65536, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x10000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x10000, x6, 212, x9)

inst_81:
// rs2_val == 32768, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x8000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x8000, x6, 216, x9)

inst_82:
// rs2_val == 16384, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x4000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x4000, x6, 220, x9)

inst_83:
// rs2_val == 8192, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x2000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x2000, x6, 224, x9)

inst_84:
// rs2_val == 4096, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x1000
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x1000, x6, 228, x9)

inst_85:
// rs2_val == 2048, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x800
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x800, x6, 232, x9)

inst_86:
// rs2_val == 1024, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x400
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x400, x6, 236, x9)

inst_87:
// rs2_val == 512, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x200
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x200, x6, 240, x9)

inst_88:
// rs2_val == 256, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x100
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x100, x6, 244, x9)

inst_89:
// rs2_val == 128, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x80
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x80, x6, 248, x9)

inst_90:
// rs2_val == 64, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x40
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x40, x6, 252, x9)

inst_91:
// rs2_val == 32, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x20
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x20, x6, 256, x9)

inst_92:
// rs2_val == 16, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x10
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x10, x6, 260, x9)

inst_93:
// rs2_val == 8, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x8
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x8, x6, 264, x9)

inst_94:
// rs2_val == 4, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x4
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x4, x6, 268, x9)

inst_95:
// rs2_val == 2, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x2
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x2, x6, 272, x9)

inst_96:
// rs1_val == -2147483648, rs1_val == (-2**(xlen-1))
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x80000000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x80000000, 0x0, x6, 276, x9)

inst_97:
// rs1_val == 1073741824, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x40000000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x40000000, 0x0, x6, 280, x9)

inst_98:
// rs1_val == 536870912, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x20000000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x20000000, 0x0, x6, 284, x9)

inst_99:
// rs1_val == 268435456, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x10000000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x10000000, 0x0, x6, 288, x9)

inst_100:
// rs1_val == 134217728, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x8000000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x8000000, 0x0, x6, 292, x9)

inst_101:
// rs1_val == 67108864, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x4000000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x4000000, 0x0, x6, 296, x9)

inst_102:
// rs1_val == 33554432, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x2000000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x2000000, 0x0, x6, 300, x9)

inst_103:
// rs1_val == 16777216, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1000000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1000000, 0x0, x6, 304, x9)

inst_104:
// rs1_val == 8388608, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x800000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x800000, 0x0, x6, 308, x9)

inst_105:
// rs1_val == 4194304, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x400000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x400000, 0x0, x6, 312, x9)

inst_106:
// rs1_val == 2097152, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x200000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x200000, 0x0, x6, 316, x9)

inst_107:
// rs1_val == 1048576, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x100000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x100000, 0x0, x6, 320, x9)

inst_108:
// rs1_val == 524288, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x80000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x80000, 0x0, x6, 324, x9)

inst_109:
// rs1_val == 262144, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x40000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x40000, 0x0, x6, 328, x9)

inst_110:
// rs1_val == 131072, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x20000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x20000, 0x0, x6, 332, x9)

inst_111:
// rs1_val == 65536, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x10000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x10000, 0x0, x6, 336, x9)

inst_112:
// rs1_val == 32768, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x8000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x8000, 0x0, x6, 340, x9)

inst_113:
// rs1_val == 16384, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x4000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x4000, 0x0, x6, 344, x9)

inst_114:
// rs1_val == 8192, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x2000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x2000, 0x0, x6, 348, x9)

inst_115:
// rs1_val == 4096, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1000;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1000, 0x0, x6, 352, x9)

inst_116:
// rs1_val == 2048, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x800;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x800, 0x0, x6, 356, x9)

inst_117:
// rs1_val == 1024, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x400;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x400, 0x0, x6, 360, x9)

inst_118:
// rs1_val == 512, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x200;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x200, 0x0, x6, 364, x9)

inst_119:
// rs1_val == 256, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x100;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x100, 0x0, x6, 368, x9)

inst_120:
// rs1_val == 128, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x80;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x80, 0x0, x6, 372, x9)

inst_121:
// rs1_val == 64, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x40;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x40, 0x0, x6, 376, x9)

inst_122:
// rs1_val == 32, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x20;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x20, 0x0, x6, 380, x9)

inst_123:
// rs1_val == 16, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x10;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x10, 0x0, x6, 384, x9)

inst_124:
// rs1_val == 8, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x8;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x8, 0x0, x6, 388, x9)

inst_125:
// rs1_val == 4, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x4;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x4, 0x0, x6, 392, x9)

inst_126:
// rs1_val == 2, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x2;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x2, 0x0, x6, 396, x9)

inst_127:
// rs1_val == 1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x1;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x1, 0x0, x6, 400, x9)

inst_128:
// rs1_val==-1 and rs2_val==-1, rs1_val == rs2_val, rs1_val < 0 and rs2_val < 0
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x1, x6, 404, x9)

inst_129:
// rs1_val==-1 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x0, x6, 408, x9)

inst_130:
// rs1_val==-1 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x33333334, x6, 412, x9)

inst_131:
// rs1_val==-1 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x66666667, x6, 416, x9)

inst_132:
// rs1_val==-1 and rs2_val==1717986918, rs1_val < 0 and rs2_val > 0
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x66666666, x6, 420, x9)

inst_133:
// rs1_val==-1 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x33333333, x6, 424, x9)

inst_134:
// rs1_val==-1 and rs2_val==-1431655766, rs2_val == -1431655766
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, -0x55555556, x6, 428, x9)

inst_135:
// rs1_val==-1 and rs2_val==1431655765, rs2_val == 1431655765
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x1;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x1, 0x55555555, x6, 432, x9)

inst_136:
// rs1_val==0 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x1, x6, 436, x9)

inst_137:
// rs1_val==0 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x0, x6, 440, x9)

inst_138:
// rs1_val==0 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x33333334, x6, 444, x9)

inst_139:
// rs1_val==0 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x66666667, x6, 448, x9)

inst_140:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x66666666, x6, 452, x9)

inst_141:
// rs1_val==0 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x33333333, x6, 456, x9)

inst_142:
// rs1_val==0 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x55555556, x6, 460, x9)

inst_143:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x55555555, x6, 464, x9)

inst_144:
// rs1_val==-858993460 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x1, x6, 468, x9)

inst_145:
// rs1_val==-858993460 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x0, x6, 472, x9)

inst_146:
// rs1_val==-858993460 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x33333334, x6, 476, x9)

inst_147:
// rs1_val==-858993460 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x66666667, x6, 480, x9)

inst_148:
// rs1_val==-858993460 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x66666666, x6, 484, x9)

inst_149:
// rs1_val==-858993460 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x33333333, x6, 488, x9)

inst_150:
// rs1_val==-858993460 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, -0x55555556, x6, 492, x9)

inst_151:
// rs1_val==-858993460 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x33333334;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x33333334, 0x55555555, x6, 496, x9)

inst_152:
// rs1_val==-1717986919 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x1, x6, 500, x9)

inst_153:
// rs1_val==-1717986919 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x0, x6, 504, x9)

inst_154:
// rs1_val==-1717986919 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x33333334, x6, 508, x9)

inst_155:
// rs1_val==-1717986919 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x66666667, x6, 512, x9)

inst_156:
// rs1_val==-1717986919 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x66666666, x6, 516, x9)

inst_157:
// rs1_val==-1717986919 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x33333333, x6, 520, x9)

inst_158:
// rs1_val==-1717986919 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, -0x55555556, x6, 524, x9)

inst_159:
// rs1_val==-1717986919 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x66666667;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x66666667, 0x55555555, x6, 528, x9)

inst_160:
// rs1_val==1717986918 and rs2_val==-1, rs1_val > 0 and rs2_val < 0
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x1, x6, 532, x9)

inst_161:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x0, x6, 536, x9)

inst_162:
// rs1_val==1717986918 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x33333334, x6, 540, x9)

inst_163:
// rs1_val==1717986918 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x66666667, x6, 544, x9)

inst_164:
// rs1_val==1431655765 and rs2_val==1431655765, rs1_val > 0 and rs2_val > 0, rs1_val == 1431655765
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x55555555, x6, 548, x9)

inst_165:
// rs1_val == -1431655766, rs1_val==-1431655766 and rs2_val==0
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x0, x6, 552, x9)

inst_166:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x66666666, x6, 556, x9)

inst_167:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x33333333, x6, 560, x9)

inst_168:
// rs1_val==1717986918 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, -0x55555556, x6, 564, x9)

inst_169:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x66666666;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x66666666, 0x55555555, x6, 568, x9)

inst_170:
// rs1_val==858993459 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x1, x6, 572, x9)

inst_171:
// rs1_val==858993459 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x0, x6, 576, x9)

inst_172:
// rs1_val==858993459 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x33333334, x6, 580, x9)

inst_173:
// rs1_val==858993459 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x66666667, x6, 584, x9)

inst_174:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x66666666, x6, 588, x9)

inst_175:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x33333333, x6, 592, x9)

inst_176:
// rs1_val==858993459 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, -0x55555556, x6, 596, x9)

inst_177:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x33333333;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x33333333, 0x55555555, x6, 600, x9)

inst_178:
// rs1_val==-1431655766 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x1, x6, 604, x9)

inst_179:
// rs1_val==-1431655766 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x33333334, x6, 608, x9)

inst_180:
// rs1_val==-1431655766 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x66666667, x6, 612, x9)

inst_181:
// rs1_val==-1431655766 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x66666666, x6, 616, x9)

inst_182:
// rs1_val==-1431655766 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x33333333, x6, 620, x9)

inst_183:
// rs1_val==-1431655766 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, -0x55555556, x6, 624, x9)

inst_184:
// rs1_val==-1431655766 and rs2_val==1431655765, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:-0x55555556;  op2val:0x55555555
TEST_RR_OP(min, x31, x30, x29, 0x00000000, -0x55555556, 0x55555555, x6, 628, x9)

inst_185:
// rs1_val==1431655765 and rs2_val==-1, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x1
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x1, x6, 632, x9)

inst_186:
// rs1_val==1431655765 and rs2_val==0, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x0
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x0, x6, 636, x9)

inst_187:
// rs1_val==1431655765 and rs2_val==-858993460, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x33333334
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x33333334, x6, 640, x9)

inst_188:
// rs1_val==1431655765 and rs2_val==-1717986919, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x66666667
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x66666667, x6, 644, x9)

inst_189:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x66666666
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x66666666, x6, 648, x9)

inst_190:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:0x33333333
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, 0x33333333, x6, 652, x9)

inst_191:
// rs1_val==1431655765 and rs2_val==-1431655766, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x55555555;  op2val:-0x55555556
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x55555555, -0x55555556, x6, 656, x9)

inst_192:
// rs2_val == 2147483647, rs2_val == (2**(xlen-1)-1)
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:0x7fffffff
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, 0x7fffffff, x6, 660, x9)

inst_193:
// rs2_val == -536870913, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x20000001
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x20000001, x6, 664, x9)

inst_194:
// rs2_val == -9, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x9
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x9, x6, 668, x9)

inst_195:
// rs2_val == -5, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x5
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x5, x6, 672, x9)

inst_196:
// rs2_val == -3, 
// opcode: min ; op1:x30; op2:x29; dest:x31; op1val:0x0;  op2val:-0x3
TEST_RR_OP(min, x31, x30, x29, 0x00000000, 0x0, -0x3, x6, 676, x9)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN


signature_x1_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 27*(XLEN/32),4,0xdeadbeef


signature_x6_0:
    .fill 170*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
